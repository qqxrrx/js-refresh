javascript:
  high-level, object oriented multi-paradigm programming language

role of js:
  logical actions, dynamic effects for the web
  made modern web possible
  required to master it before moving on js frameworks (react, angular, vue, etc.)
  web, desktop, mobile


ECMAscript:
- ES5
- ES6/ES2015
...
- ES13/ES2022

ES6 ~ ES11 = modern javascript

external javascript files are better than inline code


in js values are either an Object or a Primitive

Primitive data types:
  Number: or floating point numbers (decimals, integers)
  String: sequence of characters (text)
  Boolean: logical only true or false, taking decisions
  Undefined: not yet defined or not yet initialized
  Null: empty value
  Symbol: unique value that cannot be changed
  BigInt: large integers too large for Number type


js is dynamic, data types are automatically determined when value is stored
value has type and not the variable


declaration of variables
  var = old way of declaring, avoid it
      = the same with let
      = function scoped

  let = declare variables that can change later, during execution
      = reassign value or "mutate" the variable
      = only use if it will change in the future
      = block scoped

  const = value remains constant, can't be changed
        = "immutable", can't declare empty const variables they need initial value
        = use by default

  bad practice = not declaring using let and const, because it will be declared globally



operators = allow to transform values
  mathematical/arithmetic (*,/,+,-, %, **)
  assignment (=, *=, /=, +=, -=, %=, **=)
  comparison/relational (>, <, >=, <=)
  equality (!=, ==, !==, ===)
  logical (&&, ||, ??)

  operator precedence matters, js will follow the rules of precedence
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table


if/else = control structure


type conversion = manually convert types (explicitly, shown)
type coercion = js automatically converts types (implicitly, hidden)

5 falsy values in js:
  0 (zero)
  '' (empty string)
  undefined (uninitialized)
  null (null value)
  NaN (not a number)



== vs ===

== : (loose equality operator) type coercion executed
      BUG PRONE, AVOID
=== : (strict equality operator) NO type coercion



Boolean Logic

  truth tables (AND, OR, NOT)
  https://en.wikipedia.org/wiki/Truth_table

  AND (need all true to make it true)
    true AND true is true
    true AND false is false
    false AND true is false
    false AND false is false

  OR (only need one true to make it true)
    true OR true is true
    true OR false is true
    false OR true is true
    false OR false is false

  NOT (reverse value of boolean)
    NOT true is false
    NOT false is true
    note = NOT (!) has higher precedence than AND / OR... will reverse value first