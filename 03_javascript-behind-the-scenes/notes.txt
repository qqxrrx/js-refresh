javascript:
  basic definition:
    high level, object oriented, multi-paradigm programming language
  specific definition:
    high level, prototype-based object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single-threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model


--- high level

  no need to worry about resource management
  has abstractions to handle the work
  downside could be unoptimized code


--- garbage-collected

  automatically remove unused objects from memory


--- interpreted or just-in-time compiled

  converts code to machine code inside the javascript engine


--- multi-paradigm

  paradigm: mindset of structuring code which directs the coding style and technique
  types:
    procedural: organizing code in linear way with functions
    object oriented programming: classes
    functional programming: pure functions, high order functions, currying, composition


--- prototype-based object-oriented

  prototypal inheritance, existing blueprint already has methods which created objects inherit from


--- first-class functions

  functions are treated as variables, can pass functions to other functions


--- dynamic

  dynamically typed, don't assign data type... only known then JS executes the code
  variable types change when you assign a new type with a few exceptions


--- single-threaded

  concurrency model is single thread (can only do one task at a time)


--- non-blocking event loop

  event loop execute at background thread and then returns it to the main thread once it's finished


javascript engine
  - executes javasript code
  - dependent on browser
  - example: v8 engine (google chrome browser & nodejs)

  heap
    unstructured memory pool where you store objects

  call stack
    where code is queued and executed via "execution context"

compilation
  source code is compiled into portable machine code (dependent on the target architecture), FAST

interpretation
  runs through source code and executes it line by line (converted to machine code first before executed), SLOW

modern js engines
  - use both compilation and interpretation (just-in-time compilation)
  - JIT = convert to machine code once, execute immediately

  1. parse code (read code) ->
  2. create AST (abstract syntax tree), group relevant parts and check errors ->
  3. compilation (to machine code using JIT) ->
  4. execute (the machine code) ->
  5. optimization (after 1st execution, 1st execution is mostly unoptimized) ->
  6. [back to compilation step, recompile for next optimization step]


WEB APIs
  - functionalities provided on engine but NOT a part of javascript
  - part of the runtime (DOM, Timers, Fetch API, etc.)

callback queue
  - datastructure which contains callback functions from events that are ready to be executed
  - "event loop" takes callback function and puts them into the "call stack" to execute them
