destructuring:
  ES6 feature = unpack a complex data structure
  for array destructuring, use []
  for object destructuring, use {}


spread operator (= ...):
  done on the right side of assignment (=) operator
  "spread" ALL elements of array OR properties of object
  works in ALL iterables (array, string, map, set)
  works in objects for copying existing object or creating a new object
  does not work inside template string argument `${}`


rest pattern (... =)
  done on the left side of assignment (=) operator
  "collect" ALL elements of array OR properties of object
  in arrays, takes the rest of the elements and does not include skipped elements
  in objects, it will take the rest of the propertieds
  always the last on the destructuring assignment
  there can only be ONE rest pattern


short circuit evaluation (&& and ||)
  || = if first value is truthy, then return it and skip the 2nd value
  && = if first value is falsy, then return it and skip 2nd value otherwise return 2nd value


nullish coalescing operator (??)
  works with nullish values only (null and undefined)
  does not include 0 or '' (which are falsy values)
  therefore best to use with values expecting a 0 (zero) value being a valid value
  is the 1st part 'null' or 'undefined'? if yes then return the 2nd part otherwise return the 1st


logical assignment operators (&&= , ||= , ??=)
  ||= if value is falsy then assign the 2nd value, however if we evaluate 0 (zero) it will be falsy (logical error!)
  solution is 'logical nullish assignment operator' ??=
  &&= if 1st and 2nd value is truthy then assign the 2nd value


looping arrays (for-of loop)
  loop elements of array
  Array.entries() = return an array of arrays that has both index and value


ES6 enhanced object literals
  1. allow you to just use the actual declaration as the property name of the object
  2. on functions:
      from
        functionName: function(params) {}
      to
        functionName(params) {}
  3. compute/calculate property names (where the property names can be set during execution)


Optional Chaining (?.)
  avoids error if non existent property is used
  simplifies checking of deeply nested properties
  returns 'undefined' if property not found instead of TypeError
  check left hand side of ?. if it exists


Object.keys()
  returns array of property name/key

Object.values()
  returns array of property values

Object.entries()
  returns array of combined property name/key & value array


Sets (ES6)
  collection of unique values
  can't have any duplicates
  pass an iterable (array, string) and it returns an iterable
  no indexes, unorded
  use case: store unique elements
  remove duplicate values of arrays
  not intended to replace array