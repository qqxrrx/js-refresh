javascript:
  basic definition:
    high level, object oriented, multi-paradigm programming language
  specific definition:
    high level, prototype-based object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single-threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model


--- high level

  no need to worry about resource management
  has abstractions to handle the work
  downside could be unoptimized code


--- garbage-collected

  automatically remove unused objects from memory


--- interpreted or just-in-time compiled

  converts code to machine code inside the javascript engine


--- multi-paradigm

  paradigm: mindset of structuring code which directs the coding style and technique
  types:
    procedural: organizing code in linear way with functions
    object oriented programming: classes
    functional programming: pure functions, high order functions, currying, composition


--- prototype-based object-oriented

  prototypal inheritance, existing blueprint already has methods which created objects inherit from


--- first-class functions

  functions are treated as variables, can pass functions to other functions


--- dynamic

  dynamically typed, don't assign data type... only known then JS executes the code
  variable types change when you assign a new type with a few exceptions


--- single-threaded

  concurrency model is single thread (can only do one task at a time)


--- non-blocking event loop

  event loop execute at background thread and then returns it to the main thread once it's finished


javascript engine
  - executes javasript code
  - dependent on browser
  - example: v8 engine (google chrome browser & nodejs)

  heap
    unstructured memory pool where you store objects

  call stack
    where code is queued and executed via "execution context"


compilation
  source code is compiled into portable machine code (dependent on the target architecture), FAST


interpretation
  runs through source code and executes it line by line (converted to machine code first before executed), SLOW


modern js engines
  - use both compilation and interpretation (just-in-time compilation)
  - JIT = convert to machine code once, execute immediately

  1. parse code (read code) ->
  2. create AST (abstract syntax tree), group relevant parts and check errors ->
  3. compilation (to machine code using JIT) ->
  4. execute (the machine code) ->
  5. optimization (after 1st execution, 1st execution is mostly unoptimized) ->
  6. [back to compilation step, recompile for next optimization step]


WEB APIs
  - functionalities provided on engine but NOT a part of javascript
  - part of the runtime (DOM, Timers, Fetch API, etc.)


callback queue
  - datastructure which contains callback functions from events that are ready to be executed
  - "event loop" takes callback function and puts them into the "call stack" to execute them


global execution context
  - created after compilation
  - top level code (not inside any function) uses it
  - compartment where compiled javascript code is executed
  - only ONE global execution context
  - for each function call, create an execution context which belongs to one global execution context


  execution context (compartment of code), contains:

    1. variable environment
          let, const, var
          functions
          arguments object
    2. scope chain
    3. 'this' keyword

    NOTE1 = arrow functions does not have 'argument object' and 'this' keyword
          = they can use the closest parent function instead

    NOTE2 = values only become known during execution

    NOTE3 = the "execution context" on top of the "call stack" is the first one executed
          = FIFO (first in first out) "call stack" operation
          = top most "execution context" will need to be finished first before the previous is unpaused


    ------- <call stack> -------

    [execution context -> execute func2 within func1 which is currently paused]
    [execution context -> execute func1]
    [global execution context, only terminated if browser/process is closed/terminated]

    ------- <call stack> -------

    compiled & optimized code runs on an "execution context" within the "call stack"



scope and scope chain

  scope
    - where to variables only live?
    - defined as control of access
    - scope of variable: region of code where variables can be accessed
    - lexical scoping: scoping of variables are controlled where it is placed/positioned

    - types of scope:

        global scope = top level code (outside any function or block)
                     = accessible everywhere

        function scope = where functions create their own scope
                       = variables only inside function
                       = also called local scope

        block scope (ES6) = everything between curly braces (example: if-block, for-loop)
                          = only applied with 'let' and 'const' variables!
                          = if you declare variable with 'var' it will ignore block level scoping they are within function scope, just avoid 'var'
                          = functions are blocked scope if 'use strict' is used, if turned off then it will ignore block scope, always use 'use strict'

  scope chain
    - every scope has access to variables from all outer scopes / parent scopes
    - variable lookup: if the engine tries to look upwards the scope chain
    - outer scope / parent scope will not have access to child scope
    - scope chain only works upwards (child to parent), not sidewards (sibling), not downwards (parent to child)
    - nothing to do with order of execution context from call stack, scope chain is just access rules for variables
    - execution context takes note of variables according to it's scope chain
    - "reference error" if variable can't be found according to scope chain
    - if the variable we are looking for is already within the current scope, there will be no variable lookup



Hoisting
  make some types of variables accessible in code before they are actually declared
  creation phase of execution context, code is scanned for variable declarations
  each variable, a new property is created in the varible environment object
  ~ created for mutual recursion

  function declaration:
    hoisted, initial value = actual function, block scope ('use strict', otherwise function scope)

  var variables:
    hoisted, initial value = undefined, function scope
    in modern javascript avoid 'var'

  let and const variables:
    not hoisted, initial value = unintialized (can't access, temporal dead zone TDZ), block scope

  function expressions, arrow function:
    depends if using var/let/const = acts depends on the variable declaration


Temporal Dead Zone (TDZ)
  location where variables that are not yet initialized
  accessing variables before declaration is bad practice
  return ReferenceError if variable not initialized
  makes const variables actually work
